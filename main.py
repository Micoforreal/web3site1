from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import random
from typing import Dict, List
from datetime import datetime
from collections import deque

app = FastAPI()

# Allow CORS for your frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Update this with your frontend domain in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Store recent votes in a deque (limited to last 50 votes)
recent_votes = deque(maxlen=50)

# Initial countries with their flags
leaderboard = [
    {"country": "Turkey", "percentage": 0, "flag": "ðŸ‡¹ðŸ‡·", "votes": random.randint(10, 100)},
    {"country": "India", "percentage": 0, "flag": "ðŸ‡®ðŸ‡³", "votes": random.randint(10, 100)},
    {"country": "Philippines", "percentage": 0, "flag": "ðŸ‡µðŸ‡­", "votes": random.randint(10, 100)},
    {"country": "Mexico", "percentage": 0, "flag": "ðŸ‡²ðŸ‡½", "votes": random.randint(10, 100)},
    {"country": "Vietnam", "percentage": 0, "flag": "ðŸ‡»ðŸ‡³", "votes": random.randint(10, 100)},
    {"country": "Indonesia", "percentage": 0, "flag": "ðŸ‡®ðŸ‡©", "votes": random.randint(10, 100)},
]

# Additional countries with their flags
countries_data = [
    ("United States", "ðŸ‡ºðŸ‡¸"), ("China", "ðŸ‡¨ðŸ‡³"), ("Brazil", "ðŸ‡§ðŸ‡·"), ("Russia", "ðŸ‡·ðŸ‡º"),
    ("United Kingdom", "ðŸ‡¬ðŸ‡§"), ("Germany", "ðŸ‡©ðŸ‡ª"), ("France", "ðŸ‡«ðŸ‡·"), ("Italy", "ðŸ‡®ðŸ‡¹"),
    ("Canada", "ðŸ‡¨ðŸ‡¦"), ("Spain", "ðŸ‡ªðŸ‡¸"), ("Japan", "ðŸ‡¯ðŸ‡µ"), ("South Korea", "ðŸ‡°ðŸ‡·"),
    ("Australia", "ðŸ‡¦ðŸ‡º"), ("Netherlands", "ðŸ‡³ðŸ‡±"), ("Sweden", "ðŸ‡¸ðŸ‡ª"), ("Switzerland", "ðŸ‡¨ðŸ‡­"),
    ("Norway", "ðŸ‡³ðŸ‡´"), ("Denmark", "ðŸ‡©ðŸ‡°"), ("Belgium", "ðŸ‡§ðŸ‡ª"), ("Finland", "ðŸ‡«ðŸ‡®"),
    ("Ireland", "ðŸ‡®ðŸ‡ª"), ("Singapore", "ðŸ‡¸ðŸ‡¬"), ("Malaysia", "ðŸ‡²ðŸ‡¾"), ("Thailand", "ðŸ‡¹ðŸ‡­"),
    ("New Zealand", "ðŸ‡³ðŸ‡¿"), ("Saudi Arabia", "ðŸ‡¸ðŸ‡¦"), ("Argentina", "ðŸ‡¦ðŸ‡·"),
    ("Colombia", "ðŸ‡¨ðŸ‡´"), ("Chile", "ðŸ‡¨ðŸ‡±"), ("South Africa", "ðŸ‡¿ðŸ‡¦"), ("Nigeria", "ðŸ‡³ðŸ‡¬"),
    ("Egypt", "ðŸ‡ªðŸ‡¬"), ("Pakistan", "ðŸ‡µðŸ‡°"), ("Bangladesh", "ðŸ‡§ðŸ‡©"), ("Israel", "ðŸ‡®ðŸ‡±"),
    ("Greece", "ðŸ‡¬ðŸ‡·"), ("Portugal", "ðŸ‡µðŸ‡¹"), ("Czechia", "ðŸ‡¨ðŸ‡¿"), ("Poland", "ðŸ‡µðŸ‡±"),
    ("Hungary", "ðŸ‡­ðŸ‡º"), ("Austria", "ðŸ‡¦ðŸ‡¹"), ("Romania", "ðŸ‡·ðŸ‡´"), ("Bulgaria", "ðŸ‡§ðŸ‡¬"),
    ("Slovakia", "ðŸ‡¸ðŸ‡°"), ("Croatia", "ðŸ‡­ðŸ‡·"), ("Serbia", "ðŸ‡·ðŸ‡¸"), ("Albania", "ðŸ‡¦ðŸ‡±"),
    ("Slovenia", "ðŸ‡¸ðŸ‡®"), ("Estonia", "ðŸ‡ªðŸ‡ª"), ("Latvia", "ðŸ‡±ðŸ‡»"), ("Lithuania", "ðŸ‡±ðŸ‡¹"),
    ("Iceland", "ðŸ‡®ðŸ‡¸"), ("Ukraine", "ðŸ‡ºðŸ‡¦"), ("Belarus", "ðŸ‡§ðŸ‡¾"), ("Georgia", "ðŸ‡¬ðŸ‡ª"),
    ("Kazakhstan", "ðŸ‡°ðŸ‡¿"), ("Uzbekistan", "ðŸ‡ºðŸ‡¿"), ("Kyrgyzstan", "ðŸ‡°ðŸ‡¬"), ("Mongolia", "ðŸ‡²ðŸ‡³"),
    ("Myanmar", "ðŸ‡²ðŸ‡²"), ("Laos", "ðŸ‡±ðŸ‡¦"), ("Cambodia", "ðŸ‡°ðŸ‡­"), ("Nepal", "ðŸ‡³ðŸ‡µ"),
    ("Bhutan", "ðŸ‡§ðŸ‡¹"), ("Sri Lanka", "ðŸ‡±ðŸ‡°"), ("Maldives", "ðŸ‡²ðŸ‡»"), ("Afghanistan", "ðŸ‡¦ðŸ‡«"),
    ("Iran", "ðŸ‡®ðŸ‡·"), ("Iraq", "ðŸ‡®ðŸ‡¶"), ("Syria", "ðŸ‡¸ðŸ‡¾"), ("Lebanon", "ðŸ‡±ðŸ‡§"),
    ("Jordan", "ðŸ‡¯ðŸ‡´"), ("Palestine", "ðŸ‡µðŸ‡¸"), ("Oman", "ðŸ‡´ðŸ‡²"), ("Yemen", "ðŸ‡¾ðŸ‡ª"),
    ("Qatar", "ðŸ‡¶ðŸ‡¦"), ("Kuwait", "ðŸ‡°ðŸ‡¼"), ("Bahrain", "ðŸ‡§ðŸ‡­"), ("UAE", "ðŸ‡¦ðŸ‡ª"),
    ("Morocco", "ðŸ‡²ðŸ‡¦"), ("Algeria", "ðŸ‡©ðŸ‡¿"), ("Tunisia", "ðŸ‡¹ðŸ‡³"), ("Libya", "ðŸ‡±ðŸ‡¾"),
    ("Sudan", "ðŸ‡¸ðŸ‡©"), ("Ethiopia", "ðŸ‡ªðŸ‡¹"), ("Kenya", "ðŸ‡°ðŸ‡ª"), ("Tanzania", "ðŸ‡¹ðŸ‡¿"),
    ("Uganda", "ðŸ‡ºðŸ‡¬"), ("Rwanda", "ðŸ‡·ðŸ‡¼"), ("Zambia", "ðŸ‡¿ðŸ‡²"), ("Zimbabwe", "ðŸ‡¿ðŸ‡¼"),
    ("Botswana", "ðŸ‡§ðŸ‡¼"), ("Namibia", "ðŸ‡³ðŸ‡¦"), ("Angola", "ðŸ‡¦ðŸ‡´"), ("Mozambique", "ðŸ‡²ðŸ‡¿"),
    ("Madagascar", "ðŸ‡²ðŸ‡¬")
]

# Add additional countries to the leaderboard
for country, flag in countries_data:
    if not any(entry["country"] == country for entry in leaderboard):
        leaderboard.append({
            "country": country,
            "percentage": 0,
            "flag": flag,
            "votes": random.randint(10, 100)
        })

# Store IP votes with timestamp
ip_votes: Dict[str, Dict[str, datetime]] = {}

class Vote(BaseModel):
    country: str

@app.get("/leaderboard")
async def get_leaderboard():
    """
    Retrieve the leaderboard sorted by votes.
    """
    sorted_leaderboard = sorted(leaderboard, key=lambda x: x["votes"], reverse=True)
    total_votes = sum(entry["votes"] for entry in sorted_leaderboard)
    
    for entry in sorted_leaderboard:
        entry["percentage"] = round((entry["votes"] / total_votes) * 100, 2) if total_votes > 0 else 0
    
    return {
        "leaderboard": sorted_leaderboard,
        "total_votes": total_votes
    }

@app.get("/recent-votes")
async def get_recent_votes():
    """
    Get the most recent votes without IP information
    """
    return {"recent_votes": list(recent_votes)}

@app.get("/my-votes")
async def get_my_votes(request: Request):
    """
    Get all votes made by the current IP address
    """
    client_ip = request.client.host
    if client_ip in ip_votes:
        return {
            "votes": [
                {
                    "country": country,
                    "timestamp": timestamp
                }
                for country, timestamp in ip_votes[client_ip].items()
            ]
        }
    return {"votes": []}

@app.get("/stats")
async def get_stats():
    """
    Get voting statistics
    """
    total_unique_voters = len(ip_votes)
    total_votes = sum(len(votes) for votes in ip_votes.values())
    
    return {
        "unique_voters": total_unique_voters,
        "total_votes": total_votes,
        "votes_per_ip_average": round(total_votes / total_unique_voters, 2) if total_unique_voters > 0 else 0
    }

@app.post("/vote")
async def vote(vote: Vote, request: Request):
    """
    Record a vote and add it to recent votes
    """
    client_ip = request.client.host
    
    # Initialize IP record if it doesn't exist
    if client_ip not in ip_votes:
        ip_votes[client_ip] = {}
    
    # Find country and its flag
    country_flag = None
    country_exists = False
    for entry in leaderboard:
        if entry["country"].lower() == vote.country.lower():
            country_exists = True
            country_flag = entry["flag"]
            ip_votes[client_ip][vote.country] = datetime.now()
            entry["votes"] += 1
            break
    
    if not country_exists:
        raise HTTPException(status_code=404, detail="Country not found")
    
    # Add to recent votes
    recent_votes.appendleft({
        "country": vote.country,
        "flag": country_flag,
        "timestamp": datetime.now().isoformat()
    })
    
    # Get updated leaderboard
    current_leaderboard = await get_leaderboard()
    # Get user's voting history
    user_votes = await get_my_votes(request)
    # Get updated stats
    stats = await get_stats()
    
    return {
        **current_leaderboard,
        "user_votes": user_votes,
        "recent_votes": list(recent_votes),
        "stats": stats
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)