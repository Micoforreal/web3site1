from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import random

app = FastAPI()

# Allow CORS for your frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Update this with your frontend domain in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# In-memory database for countries and their rankings
leaderboard = [
    {"country": "Turkey", "percentage": 0, "flag": "ðŸ‡¹ðŸ‡·", "votes": random.randint(10, 100)},
    {"country": "India", "percentage": 0, "flag": "ðŸ‡®ðŸ‡³", "votes": random.randint(10, 100)},
    {"country": "Philippines", "percentage": 0, "flag": "ðŸ‡µðŸ‡­", "votes": random.randint(10, 100)},
    {"country": "Mexico", "percentage": 0, "flag": "ðŸ‡²ðŸ‡½", "votes": random.randint(10, 100)},
    {"country": "Vietnam", "percentage": 0, "flag": "ðŸ‡»ðŸ‡³", "votes": random.randint(10, 100)},
    {"country": "Indonesia", "percentage": 0, "flag": "ðŸ‡®ðŸ‡©", "votes": random.randint(10, 100)},
]

# Add 94 more countries with random flags and vote counts
countries_data = [
    ("United States", "ðŸ‡ºðŸ‡¸"), ("China", "ðŸ‡¨ðŸ‡³"), ("Brazil", "ðŸ‡§ðŸ‡·"), ("Russia", "ðŸ‡·ðŸ‡º"),
    ("United Kingdom", "ðŸ‡¬ðŸ‡§"), ("Germany", "ðŸ‡©ðŸ‡ª"), ("France", "ðŸ‡«ðŸ‡·"), ("Italy", "ðŸ‡®ðŸ‡¹"),
    ("Canada", "ðŸ‡¨ðŸ‡¦"), ("Spain", "ðŸ‡ªðŸ‡¸"), ("Japan", "ðŸ‡¯ðŸ‡µ"), ("South Korea", "ðŸ‡°ðŸ‡·"),
    ("Australia", "ðŸ‡¦ðŸ‡º"), ("Netherlands", "ðŸ‡³ðŸ‡±"), ("Sweden", "ðŸ‡¸ðŸ‡ª"), ("Switzerland", "ðŸ‡¨ðŸ‡­"),
    ("Norway", "ðŸ‡³ðŸ‡´"), ("Denmark", "ðŸ‡©ðŸ‡°"), ("Belgium", "ðŸ‡§ðŸ‡ª"), ("Finland", "ðŸ‡«ðŸ‡®"),
    ("Ireland", "ðŸ‡®ðŸ‡ª"), ("Singapore", "ðŸ‡¸ðŸ‡¬"), ("Malaysia", "ðŸ‡²ðŸ‡¾"), ("Thailand", "ðŸ‡¹ðŸ‡­"),
    ("New Zealand", "ðŸ‡³ðŸ‡¿"), ("Saudi Arabia", "ðŸ‡¸ðŸ‡¦"), ("Argentina", "ðŸ‡¦ðŸ‡·"),
    ("Colombia", "ðŸ‡¨ðŸ‡´"), ("Chile", "ðŸ‡¨ðŸ‡±"), ("South Africa", "ðŸ‡¿ðŸ‡¦"), ("Nigeria", "ðŸ‡³ðŸ‡¬"),
    ("Egypt", "ðŸ‡ªðŸ‡¬"), ("Pakistan", "ðŸ‡µðŸ‡°"), ("Bangladesh", "ðŸ‡§ðŸ‡©"), ("Turkey", "ðŸ‡¹ðŸ‡·"),
    ("Israel", "ðŸ‡®ðŸ‡±"), ("Greece", "ðŸ‡¬ðŸ‡·"), ("Portugal", "ðŸ‡µðŸ‡¹"), ("Czechia", "ðŸ‡¨ðŸ‡¿"),
    ("Poland", "ðŸ‡µðŸ‡±"), ("Hungary", "ðŸ‡­ðŸ‡º"), ("Austria", "ðŸ‡¦ðŸ‡¹"), ("Romania", "ðŸ‡·ðŸ‡´"),
    ("Bulgaria", "ðŸ‡§ðŸ‡¬"), ("Slovakia", "ðŸ‡¸ðŸ‡°"), ("Croatia", "ðŸ‡­ðŸ‡·"), ("Serbia", "ðŸ‡·ðŸ‡¸"),
    ("Albania", "ðŸ‡¦ðŸ‡±"), ("Slovenia", "ðŸ‡¸ðŸ‡®"), ("Estonia", "ðŸ‡ªðŸ‡ª"), ("Latvia", "ðŸ‡±ðŸ‡»"),
    ("Lithuania", "ðŸ‡±ðŸ‡¹"), ("Iceland", "ðŸ‡®ðŸ‡¸"), ("Ukraine", "ðŸ‡ºðŸ‡¦"), ("Belarus", "ðŸ‡§ðŸ‡¾"),
    ("Georgia", "ðŸ‡¬ðŸ‡ª"), ("Kazakhstan", "ðŸ‡°ðŸ‡¿"), ("Uzbekistan", "ðŸ‡ºðŸ‡¿"), ("Kyrgyzstan", "ðŸ‡°ðŸ‡¬"),
    ("Mongolia", "ðŸ‡²ðŸ‡³"), ("Myanmar", "ðŸ‡²ðŸ‡²"), ("Laos", "ðŸ‡±ðŸ‡¦"), ("Cambodia", "ðŸ‡°ðŸ‡­"),
    ("Nepal", "ðŸ‡³ðŸ‡µ"), ("Bhutan", "ðŸ‡§ðŸ‡¹"), ("Sri Lanka", "ðŸ‡±ðŸ‡°"), ("Maldives", "ðŸ‡²ðŸ‡»"),
    ("Afghanistan", "ðŸ‡¦ðŸ‡«"), ("Iran", "ðŸ‡®ðŸ‡·"), ("Iraq", "ðŸ‡®ðŸ‡¶"), ("Syria", "ðŸ‡¸ðŸ‡¾"),
    ("Lebanon", "ðŸ‡±ðŸ‡§"), ("Jordan", "ðŸ‡¯ðŸ‡´"), ("Palestine", "ðŸ‡µðŸ‡¸"), ("Oman", "ðŸ‡´ðŸ‡²"),
    ("Yemen", "ðŸ‡¾ðŸ‡ª"), ("Qatar", "ðŸ‡¶ðŸ‡¦"), ("Kuwait", "ðŸ‡°ðŸ‡¼"), ("Bahrain", "ðŸ‡§ðŸ‡­"),
    ("UAE", "ðŸ‡¦ðŸ‡ª"), ("Morocco", "ðŸ‡²ðŸ‡¦"), ("Algeria", "ðŸ‡©ðŸ‡¿"), ("Tunisia", "ðŸ‡¹ðŸ‡³"),
    ("Libya", "ðŸ‡±ðŸ‡¾"), ("Sudan", "ðŸ‡¸ðŸ‡©"), ("Ethiopia", "ðŸ‡ªðŸ‡¹"), ("Kenya", "ðŸ‡°ðŸ‡ª"),
    ("Tanzania", "ðŸ‡¹ðŸ‡¿"), ("Uganda", "ðŸ‡ºðŸ‡¬"), ("Rwanda", "ðŸ‡·ðŸ‡¼"), ("Zambia", "ðŸ‡¿ðŸ‡²"),
    ("Zimbabwe", "ðŸ‡¿ðŸ‡¼"), ("Botswana", "ðŸ‡§ðŸ‡¼"), ("Namibia", "ðŸ‡³ðŸ‡¦"), ("Angola", "ðŸ‡¦ðŸ‡´"),
    ("Mozambique", "ðŸ‡²ðŸ‡¿"), ("Madagascar", "ðŸ‡²ðŸ‡¬")
]

for country, flag in countries_data:
    leaderboard.append({"country": country, "percentage": 0, "flag": flag, "votes": random.randint(10, 100)})

# Data model for incoming vote request
class Vote(BaseModel):
    country: str

@app.get("/leaderboard")
async def get_leaderboard():
    """
    Retrieve the leaderboard sorted by votes.
    """
    sorted_leaderboard = sorted(leaderboard, key=lambda x: x["votes"], reverse=True)
    total_votes = sum(entry["votes"] for entry in sorted_leaderboard)
    for entry in sorted_leaderboard:
        entry["percentage"] = round((entry["votes"] / total_votes) * 100, 2) if total_votes > 0 else 0
    return {"leaderboard": sorted_leaderboard}

@app.post("/vote")
async def vote(vote: Vote):
    """
    Record a vote for a given country.
    """
    for entry in leaderboard:
        if entry["country"].lower() == vote.country.lower():
            entry["votes"] += 1
            return await get_leaderboard()
    raise HTTPException(status_code=404, detail="Country not found")
